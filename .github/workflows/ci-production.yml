name: API Tests - Production Grade

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test execution mode'
        required: false
        default: 'docker'
        type: choice
        options:
          - docker
          - mock
          - full

# Cancel in-progress runs to avoid resource conflicts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Production Docker Tests - Primary Strategy
  docker-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_mode == 'docker' || github.event.inputs.test_mode == 'full' || github.event.inputs.test_mode == '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Pre-warm Docker Environment
        run: |
          # Pre-pull Docker image to avoid download delays
          echo "Pre-warming Docker environment..."
          docker pull automaticbytes/demo-app:latest
          
          # Test Docker daemon health
          docker system info --format '{{.ServerVersion}}'
          docker system df
          
          # Create necessary directories
          mkdir -p scripts

      - name: Start Docker Container (Multi-Platform)
        run: |
          # Set up Docker Buildx for multi-platform support
          docker buildx create --name multiarch --use || true
          docker buildx inspect --bootstrap
          
          # Create a custom network for better connectivity
          docker network create test-network || true
          
          # Start the real demo application with enhanced configuration
          echo "Starting demo app with platform compatibility and network isolation..."
          docker run -d -p 3100:3100 --name demo-app \
            --platform linux/arm64 \
            --network test-network \
            --health-cmd="curl -f http://localhost:3100/api || exit 1" \
            --health-interval=5s \
            --health-timeout=3s \
            --health-retries=3 \
            --restart=unless-stopped \
            --add-host=host.docker.internal:host-gateway \
            -e NODE_ENV=production \
            -e PORT=3100 \
            automaticbytes/demo-app:latest
          
          # Use enhanced health check script
          chmod +x scripts/docker-health-check.sh
          ./scripts/docker-health-check.sh demo-app http://localhost:3100/api 30 2

      - name: Run Production API Tests
        run: |
          # Run Karate tests against real Docker container
          mvn test -Dtest=InventoryTestRunner
        env:
          BASE_URL: http://localhost:3100/api

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-api-results
          path: target/surefire-reports/
          retention-days: 30

      - name: Upload Karate Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: karate-reports
          path: target/karate-reports/
          retention-days: 30

      - name: Cleanup Docker Container
        if: always()
        run: |
          docker stop demo-app || true
          docker rm demo-app || true

  # Mock Server Tests - Fallback Strategy
  mock-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_mode == 'mock' || (github.event.inputs.test_mode == 'full' && needs.docker-tests.result == 'failure') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Mock Server
        run: |
          # Start mock server for fast feedback
          node mock-server.js &
          sleep 3
          
          # Verify mock server is running
          curl -f http://localhost:3100/api || {
            echo "Mock server failed to start"
            exit 1
          }

      - name: Run Mock API Tests
        run: |
          # Run Karate tests against mock server
          mvn test -Dtest=InventoryTestRunner
        env:
          BASE_URL: http://localhost:3100/api

      - name: Upload Mock Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mock-api-results
          path: target/surefire-reports/
          retention-days: 7

      - name: Cleanup Mock Server
        if: always()
        run: |
          pkill -f "node mock-server.js" || true

  # Performance Tests - Full Production Validation
  performance-tests:
    runs-on: ubuntu-latest
    needs: [docker-tests]
    if: ${{ github.event.inputs.test_mode == 'full' && needs.docker-tests.result == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Docker Container
        run: |
          # Start the real demo application
          docker run -d -p 3100:3100 --name demo-app automaticbytes/demo-app:latest
          
          # Wait for API to be ready
          for i in {1..30}; do
            if curl -f http://localhost:3100/api >/dev/null 2>&1; then
              echo "Demo app API is ready!"
              break
            fi
            echo "Attempt $i/30: waiting for demo app API..."
            sleep 2
          done

      - name: Run Performance Tests
        run: |
          # Run performance tests with multiple scenarios
          mvn test -Dtest=InventoryTestRunner -Dkarate.options="--tags @performance"
        env:
          BASE_URL: http://localhost:3100/api

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-api-results
          path: target/surefire-reports/
          retention-days: 30

      - name: Cleanup Docker Container
        if: always()
        run: |
          docker stop demo-app || true
          docker rm demo-app || true
