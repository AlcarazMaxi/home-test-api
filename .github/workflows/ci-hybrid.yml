name: API Tests - Hybrid Strategy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_strategy:
        description: 'Testing strategy to execute'
        required: false
        default: 'smoke'
        type: choice
        options:
          - smoke
          - integration
          - e2e
          - full

# Cancel in-progress runs to avoid resource conflicts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Stage 1: Smoke Tests (Mock Server) - Fast Feedback
  smoke-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_strategy == 'smoke' || github.event.inputs.test_strategy == '' || github.event.inputs.test_strategy == 'full' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Mock Server
        run: |
          # Start mock server for fast smoke tests
          node -e "
          const express = require('express');
          const app = express();
          app.use(express.json());
          
          // Mock API endpoints
          app.get('/api/inventory', (req, res) => {
            res.json([
              { id: '1', name: 'Test Item 1', price: '$10.00', image: 'test1.jpg' },
              { id: '2', name: 'Test Item 2', price: '$15.00', image: 'test2.jpg' }
            ]);
          });
          
          app.get('/api', (req, res) => {
            res.json({ status: 'ok', message: 'Mock API Server' });
          });
          
          app.post('/api/inventory/add', (req, res) => {
            res.json({ success: true, id: 999, message: 'Item added successfully' });
          });
          
          app.listen(3100, () => {
            console.log('Mock API server running on port 3100');
          });
          " &
          sleep 3

      - name: Run Smoke Tests
        run: mvn test -Dtest=InventoryTestRunner -Dkarate.options="--tags @smoke"
        env:
          BASE_URL: http://localhost:3100/api

      - name: Upload Smoke Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: target/surefire-reports/
          retention-days: 7

  # Stage 2: Integration Tests (Docker with Fallback)
  integration-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_strategy == 'integration' || github.event.inputs.test_strategy == 'full' }}
    needs: smoke-tests
    if: always() && (needs.smoke-tests.result == 'success' || needs.smoke-tests.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Docker Container (Primary)
        id: docker-start
        run: |
          # Try Docker first (production-like environment)
          if docker run -d -p 3100:3100 --name demo-app automaticbytes/demo-app:latest; then
            echo "docker_started=true" >> $GITHUB_OUTPUT
            echo "container_id=$(docker ps -q --filter name=demo-app)" >> $GITHUB_OUTPUT
            # Wait for container to be ready
            timeout 60 bash -c 'until curl -f http://localhost:3100/api; do sleep 3; done' || {
              echo "Docker container failed to start properly, falling back to mock server"
              echo "docker_started=false" >> $GITHUB_OUTPUT
            }
          else
            echo "Docker container failed to start, falling back to mock server"
            echo "docker_started=false" >> $GITHUB_OUTPUT
          fi

      - name: Start Mock Server (Fallback)
        if: steps.docker-start.outputs.docker_started == 'false'
        run: |
          # Fallback to mock server if Docker fails
          node -e "
          const express = require('express');
          const app = express();
          app.use(express.json());
          
          app.get('/api/inventory', (req, res) => {
            res.json([
              { id: '1', name: 'Test Item 1', price: '$10.00', image: 'test1.jpg' },
              { id: '2', name: 'Test Item 2', price: '$15.00', image: 'test2.jpg' }
            ]);
          });
          
          app.get('/api', (req, res) => {
            res.json({ status: 'ok', message: 'Mock API Server' });
          });
          
          app.post('/api/inventory/add', (req, res) => {
            res.json({ success: true, id: 999, message: 'Item added successfully' });
          });
          
          app.listen(3100, () => {
            console.log('Mock API server running on port 3100');
          });
          " &
          sleep 3

      - name: Run Integration Tests
        run: |
          if [ "${{ steps.docker-start.outputs.docker_started }}" == "true" ]; then
            echo "Running integration tests against Docker container"
            mvn test -Dtest=InventoryTestRunner -Dkarate.options="--tags @smoke"
          else
            echo "Running integration tests against mock server"
            mvn test -Dtest=InventoryTestRunner -Dkarate.options="--tags @smoke"
          fi
        env:
          BASE_URL: http://localhost:3100/api

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: target/surefire-reports/
          retention-days: 7

      - name: Cleanup Docker Container
        if: always() && steps.docker-start.outputs.docker_started == 'true'
        run: |
          docker stop demo-app || true
          docker rm demo-app || true

  # Stage 3: End-to-End Tests (Docker Only)
  e2e-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_strategy == 'e2e' || github.event.inputs.test_strategy == 'full' }}
    needs: [smoke-tests, integration-tests]
    if: always() && (needs.smoke-tests.result == 'success' || needs.smoke-tests.result == 'skipped') && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Docker Container
        run: |
          docker run -d -p 3100:3100 --name demo-app automaticbytes/demo-app:latest
          # Wait for container to be ready with extended timeout
          timeout 120 bash -c 'until curl -f http://localhost:3100/api; do sleep 5; done'

      - name: Run E2E Tests
        run: mvn test -Dtest=InventoryTestRunner
        env:
          BASE_URL: http://localhost:3100/api

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: target/surefire-reports/
          retention-days: 30

      - name: Cleanup Docker Container
        if: always()
        run: |
          docker stop demo-app || true
          docker rm demo-app || true

  # Stage 4: Performance Tests (Docker + Load Testing)
  performance-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_strategy == 'full' }}
    needs: [smoke-tests, integration-tests, e2e-tests]
    if: always() && (needs.smoke-tests.result == 'success' || needs.smoke-tests.result == 'skipped') && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped') && (needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Docker Container
        run: |
          docker run -d -p 3100:3100 --name demo-app automaticbytes/demo-app:latest
          timeout 120 bash -c 'until curl -f http://localhost:3100/api; do sleep 5; done'

      - name: Run Performance Tests
        run: |
          # Run performance tests with load testing
          mvn test -Dtest=InventoryTestRunner -Dkarate.options="--tags @performance"
        env:
          BASE_URL: http://localhost:3100/api

      - name: Upload Performance Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: target/surefire-reports/
          retention-days: 30

      - name: Cleanup Docker Container
        if: always()
        run: |
          docker stop demo-app || true
          docker rm demo-app || true
