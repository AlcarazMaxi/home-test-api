name: API Tests - Principal QA Engineer Solution

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  # Principal QA Engineer: Comprehensive Docker Platform Compatibility
  api-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # Multi-platform testing for comprehensive coverage
        platform: [linux/amd64, linux/arm64]
        java-version: ['17', '21']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ matrix.java-version }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-${{ matrix.java-version }}
        
    # PRINCIPAL QA ENGINEER: Docker Platform Compatibility Setup
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        driver-opts: |
          image=moby/buildkit:v0.12.5
          network=host
        
    - name: Set up QEMU for multi-platform builds
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        
    - name: Debug Docker environment
      run: |
        echo "=== Docker Version ==="
        docker version
        echo "=== Docker Info ==="
        docker info
        echo "=== Environment Variables ==="
        env | grep -i docker || true
        echo "=== Runner OS ==="
        echo "OS: ${{ runner.os }}"
        echo "Architecture: ${{ runner.arch }}"
        echo "Platform: ${{ matrix.platform }}"
        echo "=== Docker Buildx Info ==="
        docker buildx inspect --bootstrap
        docker buildx ls
        
    - name: Pull demo app image with platform specification
      run: |
        echo "Pulling demo app image for platform: ${{ matrix.platform }}"
        docker pull --platform ${{ matrix.platform }} automaticbytes/demo-app:latest
        
    - name: Start demo app container with platform specification
      run: |
        echo "Starting demo app container for platform: ${{ matrix.platform }}"
        docker run -d \
          --platform ${{ matrix.platform }} \
          -p 3100:3100 \
          --name demo-app-${{ matrix.platform }} \
          --health-cmd="curl -f http://localhost:3100/api || exit 1" \
          --health-interval=5s \
          --health-timeout=3s \
          --health-retries=3 \
          automaticbytes/demo-app:latest
        
        # Wait for API to be ready with comprehensive health checks
        echo "Waiting for demo app to be ready..."
        timeout 60 bash -c '
          until docker exec demo-app-${{ matrix.platform }} curl -f http://localhost:3100/api; do 
            echo "Waiting for API... (attempt $((++attempt)))"
            sleep 2
          done
        '
        
        # Verify container health
        echo "Checking container health..."
        docker ps --filter name=demo-app-${{ matrix.platform }}
        docker inspect demo-app-${{ matrix.platform }} --format="{{.State.Health.Status}}"
        
    - name: Verify API connectivity
      run: |
        echo "Testing API connectivity..."
        curl -f http://localhost:3100/api || {
          echo "API connectivity failed, debugging..."
          docker logs demo-app-${{ matrix.platform }}
          docker exec demo-app-${{ matrix.platform }} ps aux
          exit 1
        }
        echo "API is ready!"
        
    - name: Run API tests with comprehensive error handling
      run: |
        echo "Running API tests for platform: ${{ matrix.platform }}"
        mvn test -Dtest=InventoryTestRunner \
          -Dkarate.env=ci \
          -Dkarate.options="--tags @smoke" \
          -Dmaven.test.failure.ignore=false \
          -Dkarate.report.dir=target/karate-reports-${{ matrix.platform }} \
          -Dkarate.parallel=1
      env:
        BASE_URL: http://localhost:3100/api
        KARATE_ENV: ci
        PLATFORM: ${{ matrix.platform }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: surefire-reports-${{ matrix.platform }}-java${{ matrix.java-version }}
        path: target/surefire-reports/
        retention-days: 30
        
    - name: Upload Karate reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: karate-reports-${{ matrix.platform }}-java${{ matrix.java-version }}
        path: target/karate-reports-${{ matrix.platform }}/
        retention-days: 30
        
    - name: Upload Docker logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: docker-logs-${{ matrix.platform }}
        path: |
          docker-logs.txt
        retention-days: 7
        
    - name: Cleanup demo app with comprehensive error handling
      if: always()
      run: |
        echo "Cleaning up demo app container..."
        # Stop and remove container
        docker stop demo-app-${{ matrix.platform }} || true
        docker rm demo-app-${{ matrix.platform }} || true
        
        # Clean up any orphaned containers
        docker container prune -f || true
        
        # Clean up unused images to save space
        docker image prune -f || true
        
        echo "Cleanup completed for platform: ${{ matrix.platform }}"

  # PRINCIPAL QA ENGINEER: Integration Testing Job
  integration-tests:
    runs-on: ubuntu-latest
    needs: api-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Run comprehensive integration tests
      run: |
        echo "Running integration tests..."
        # Test Docker platform compatibility
        docker run --rm --platform linux/amd64 alpine:latest echo "AMD64 platform test passed"
        docker run --rm --platform linux/arm64 alpine:latest echo "ARM64 platform test passed"
        
        # Test demo app image compatibility
        docker pull --platform linux/amd64 automaticbytes/demo-app:latest
        docker pull --platform linux/arm64 automaticbytes/demo-app:latest
        
        echo "Integration tests completed successfully!"

  # PRINCIPAL QA ENGINEER: Performance Testing Job
  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Performance testing with different platforms
        for platform in linux/amd64 linux/arm64; do
          echo "Testing performance for platform: $platform"
          time docker run --rm --platform $platform automaticbytes/demo-app:latest echo "Performance test for $platform"
        done
